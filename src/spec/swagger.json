{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ServerInfo": {
				"description": "Class for exposing server info from a result.",
				"properties": {
					"address": {
						"type": "string"
					},
					"protocolVersion": {
						"type": "number",
						"format": "double"
					},
					"agent": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DevInfo": {
				"properties": {
					"message": {
						"type": "string"
					},
					"serverInfo": {
						"$ref": "#/components/schemas/ServerInfo"
					}
				},
				"required": [
					"message",
					"serverInfo"
				],
				"type": "object",
				"additionalProperties": {}
			},
			"DevModel": {
				"properties": {
					"data": {
						"$ref": "#/components/schemas/DevInfo"
					}
				},
				"required": [
					"data"
				],
				"type": "object",
				"additionalProperties": false
			},
			"HealthModel": {
				"properties": {
					"status": {
						"type": "string"
					},
					"code": {
						"type": "number",
						"enum": [
							1
						],
						"nullable": false
					}
				},
				"required": [
					"status",
					"code"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserModel": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"Happy",
							"Sad"
						]
					},
					"phoneNumbers": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"email",
					"name",
					"phoneNumbers"
				],
				"type": "object",
				"additionalProperties": false
			},
			"FieldErrors": {
				"properties": {},
				"type": "object",
				"additionalProperties": {
					"properties": {
						"value": {},
						"message": {
							"type": "string"
						}
					},
					"required": [
						"message"
					],
					"type": "object"
				}
			},
			"UserIDValidationError": {
				"properties": {
					"name": {
						"type": "string"
					},
					"message": {
						"type": "string",
						"enum": [
							"Validation failed: User ID must be a number"
						],
						"nullable": false
					},
					"stack": {
						"type": "string"
					},
					"status": {
						"type": "number",
						"format": "double"
					},
					"fields": {
						"$ref": "#/components/schemas/FieldErrors"
					},
					"details": {
						"properties": {},
						"additionalProperties": {},
						"type": "object"
					}
				},
				"required": [
					"name",
					"message",
					"status",
					"fields",
					"details"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_UserModel.email-or-name-or-phoneNumbers_": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"phoneNumbers": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"email",
					"name",
					"phoneNumbers"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UserCreationParams": {
				"$ref": "#/components/schemas/Pick_UserModel.email-or-name-or-phoneNumbers_"
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "ze-core",
		"version": "0.0.1",
		"description": "Ze - core APIs and services",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Leonard M Reidy ",
			"email": "leonard.reidy@gmail.com"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/dev/info": {
			"get": {
				"operationId": "GetDevInfo",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DevModel"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/health": {
			"get": {
				"operationId": "GetHealth",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/HealthModel"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": []
			}
		},
		"/users/{userId}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserModel"
								}
							}
						}
					},
					"422": {
						"description": "Validation Failed",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserIDValidationError"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/users": {
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"201": {
						"description": "Created"
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserCreationParams"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}